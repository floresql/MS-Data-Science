2024-06-12 22:55:19,964:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 22:55:19,964:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 22:55:19,964:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 22:55:19,964:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:41:50,220:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:41:50,220:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:41:50,220:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:41:50,220:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:42:52,411:INFO:PyCaret ClassificationExperiment
2024-06-12 23:42:52,411:INFO:Logging name: clf-default-name
2024-06-12 23:42:52,411:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-12 23:42:52,411:INFO:version 3.3.2
2024-06-12 23:42:52,411:INFO:Initializing setup()
2024-06-12 23:42:52,411:INFO:self.USI: b59e
2024-06-12 23:42:52,411:INFO:self._variable_keys: {'data', 'pipeline', 'logging_param', 'is_multiclass', 'idx', '_available_plots', 'log_plots_param', 'X_test', 'n_jobs_param', 'USI', 'y_train', 'target_param', 'fold_generator', 'exp_id', 'seed', 'X_train', 'fold_shuffle_param', '_ml_usecase', 'y', 'fold_groups_param', 'fix_imbalance', 'X', 'y_test', 'memory', 'exp_name_log', 'gpu_param', 'gpu_n_jobs_param', 'html_param'}
2024-06-12 23:42:52,411:INFO:Checking environment
2024-06-12 23:42:52,412:INFO:python_version: 3.10.14
2024-06-12 23:42:52,412:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-06-12 23:42:52,412:INFO:machine: AMD64
2024-06-12 23:42:52,412:INFO:platform: Windows-10-10.0.22631-SP0
2024-06-12 23:42:52,412:INFO:Memory: svmem(total=16931676160, available=5419020288, percent=68.0, used=11512655872, free=5419020288)
2024-06-12 23:42:52,412:INFO:Physical Core: 8
2024-06-12 23:42:52,412:INFO:Logical Core: 16
2024-06-12 23:42:52,412:INFO:Checking libraries
2024-06-12 23:42:52,412:INFO:System:
2024-06-12 23:42:52,412:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-06-12 23:42:52,412:INFO:executable: C:\Users\geflo\anaconda3\envs\PY310\python.exe
2024-06-12 23:42:52,412:INFO:   machine: Windows-10-10.0.22631-SP0
2024-06-12 23:42:52,412:INFO:PyCaret required dependencies:
2024-06-12 23:42:53,433:INFO:                 pip: 24.0
2024-06-12 23:42:53,433:INFO:          setuptools: 69.5.1
2024-06-12 23:42:53,433:INFO:             pycaret: 3.3.2
2024-06-12 23:42:53,433:INFO:             IPython: 8.20.0
2024-06-12 23:42:53,433:INFO:          ipywidgets: 7.8.1
2024-06-12 23:42:53,433:INFO:                tqdm: 4.66.4
2024-06-12 23:42:53,433:INFO:               numpy: 1.26.4
2024-06-12 23:42:53,433:INFO:              pandas: 2.1.4
2024-06-12 23:42:53,433:INFO:              jinja2: 3.1.4
2024-06-12 23:42:53,433:INFO:               scipy: 1.11.4
2024-06-12 23:42:53,433:INFO:              joblib: 1.3.2
2024-06-12 23:42:53,433:INFO:             sklearn: 1.4.2
2024-06-12 23:42:53,433:INFO:                pyod: 2.0.0
2024-06-12 23:42:53,433:INFO:            imblearn: 0.12.3
2024-06-12 23:42:53,433:INFO:   category_encoders: 2.6.3
2024-06-12 23:42:53,433:INFO:            lightgbm: 4.3.0
2024-06-12 23:42:53,433:INFO:               numba: 0.59.1
2024-06-12 23:42:53,433:INFO:            requests: 2.32.2
2024-06-12 23:42:53,433:INFO:          matplotlib: 3.7.5
2024-06-12 23:42:53,433:INFO:          scikitplot: 0.3.7
2024-06-12 23:42:53,433:INFO:         yellowbrick: 1.5
2024-06-12 23:42:53,434:INFO:              plotly: 5.22.0
2024-06-12 23:42:53,434:INFO:    plotly-resampler: Not installed
2024-06-12 23:42:53,434:INFO:             kaleido: 0.2.1
2024-06-12 23:42:53,434:INFO:           schemdraw: 0.15
2024-06-12 23:42:53,434:INFO:         statsmodels: 0.14.0
2024-06-12 23:42:53,434:INFO:              sktime: 0.26.0
2024-06-12 23:42:53,434:INFO:               tbats: 1.1.3
2024-06-12 23:42:53,434:INFO:            pmdarima: 2.0.4
2024-06-12 23:42:53,434:INFO:              psutil: 5.9.0
2024-06-12 23:42:53,434:INFO:          markupsafe: 2.1.3
2024-06-12 23:42:53,434:INFO:             pickle5: Not installed
2024-06-12 23:42:53,434:INFO:         cloudpickle: 2.2.1
2024-06-12 23:42:53,434:INFO:         deprecation: 2.1.0
2024-06-12 23:42:53,434:INFO:              xxhash: 3.4.1
2024-06-12 23:42:53,434:INFO:           wurlitzer: Not installed
2024-06-12 23:42:53,434:INFO:PyCaret optional dependencies:
2024-06-12 23:42:53,446:INFO:                shap: Not installed
2024-06-12 23:42:53,446:INFO:           interpret: Not installed
2024-06-12 23:42:53,446:INFO:                umap: Not installed
2024-06-12 23:42:53,446:INFO:     ydata_profiling: Not installed
2024-06-12 23:42:53,446:INFO:  explainerdashboard: Not installed
2024-06-12 23:42:53,446:INFO:             autoviz: Not installed
2024-06-12 23:42:53,446:INFO:           fairlearn: Not installed
2024-06-12 23:42:53,446:INFO:          deepchecks: Not installed
2024-06-12 23:42:53,446:INFO:             xgboost: Not installed
2024-06-12 23:42:53,446:INFO:            catboost: Not installed
2024-06-12 23:42:53,446:INFO:              kmodes: Not installed
2024-06-12 23:42:53,446:INFO:             mlxtend: Not installed
2024-06-12 23:42:53,446:INFO:       statsforecast: Not installed
2024-06-12 23:42:53,446:INFO:        tune_sklearn: Not installed
2024-06-12 23:42:53,446:INFO:                 ray: Not installed
2024-06-12 23:42:53,446:INFO:            hyperopt: Not installed
2024-06-12 23:42:53,446:INFO:              optuna: Not installed
2024-06-12 23:42:53,446:INFO:               skopt: Not installed
2024-06-12 23:42:53,446:INFO:              mlflow: Not installed
2024-06-12 23:42:53,446:INFO:              gradio: Not installed
2024-06-12 23:42:53,446:INFO:             fastapi: Not installed
2024-06-12 23:42:53,446:INFO:             uvicorn: Not installed
2024-06-12 23:42:53,446:INFO:              m2cgen: Not installed
2024-06-12 23:42:53,446:INFO:           evidently: Not installed
2024-06-12 23:42:53,446:INFO:               fugue: Not installed
2024-06-12 23:42:53,446:INFO:           streamlit: 1.32.0
2024-06-12 23:42:53,446:INFO:             prophet: Not installed
2024-06-12 23:42:53,446:INFO:None
2024-06-12 23:42:53,446:INFO:Set up data.
2024-06-12 23:43:04,433:INFO:PyCaret ClassificationExperiment
2024-06-12 23:43:04,433:INFO:Logging name: clf-default-name
2024-06-12 23:43:04,434:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-12 23:43:04,434:INFO:version 3.3.2
2024-06-12 23:43:04,435:INFO:Initializing setup()
2024-06-12 23:43:04,435:INFO:self.USI: 62ee
2024-06-12 23:43:04,435:INFO:self._variable_keys: {'data', 'pipeline', 'logging_param', 'is_multiclass', 'idx', '_available_plots', 'log_plots_param', 'X_test', 'n_jobs_param', 'USI', 'y_train', 'target_param', 'fold_generator', 'exp_id', 'seed', 'X_train', 'fold_shuffle_param', '_ml_usecase', 'y', 'fold_groups_param', 'fix_imbalance', 'X', 'y_test', 'memory', 'exp_name_log', 'gpu_param', 'gpu_n_jobs_param', 'html_param'}
2024-06-12 23:43:04,435:INFO:Checking environment
2024-06-12 23:43:04,435:INFO:python_version: 3.10.14
2024-06-12 23:43:04,435:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-06-12 23:43:04,436:INFO:machine: AMD64
2024-06-12 23:43:04,436:INFO:platform: Windows-10-10.0.22631-SP0
2024-06-12 23:43:04,436:INFO:Memory: svmem(total=16931676160, available=5384048640, percent=68.2, used=11547627520, free=5384048640)
2024-06-12 23:43:04,436:INFO:Physical Core: 8
2024-06-12 23:43:04,436:INFO:Logical Core: 16
2024-06-12 23:43:04,436:INFO:Checking libraries
2024-06-12 23:43:04,436:INFO:System:
2024-06-12 23:43:04,436:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-06-12 23:43:04,436:INFO:executable: C:\Users\geflo\anaconda3\envs\PY310\python.exe
2024-06-12 23:43:04,436:INFO:   machine: Windows-10-10.0.22631-SP0
2024-06-12 23:43:04,436:INFO:PyCaret required dependencies:
2024-06-12 23:43:04,437:INFO:                 pip: 24.0
2024-06-12 23:43:04,437:INFO:          setuptools: 69.5.1
2024-06-12 23:43:04,437:INFO:             pycaret: 3.3.2
2024-06-12 23:43:04,437:INFO:             IPython: 8.20.0
2024-06-12 23:43:04,437:INFO:          ipywidgets: 7.8.1
2024-06-12 23:43:04,437:INFO:                tqdm: 4.66.4
2024-06-12 23:43:04,437:INFO:               numpy: 1.26.4
2024-06-12 23:43:04,437:INFO:              pandas: 2.1.4
2024-06-12 23:43:04,437:INFO:              jinja2: 3.1.4
2024-06-12 23:43:04,437:INFO:               scipy: 1.11.4
2024-06-12 23:43:04,437:INFO:              joblib: 1.3.2
2024-06-12 23:43:04,437:INFO:             sklearn: 1.4.2
2024-06-12 23:43:04,437:INFO:                pyod: 2.0.0
2024-06-12 23:43:04,437:INFO:            imblearn: 0.12.3
2024-06-12 23:43:04,437:INFO:   category_encoders: 2.6.3
2024-06-12 23:43:04,437:INFO:            lightgbm: 4.3.0
2024-06-12 23:43:04,437:INFO:               numba: 0.59.1
2024-06-12 23:43:04,437:INFO:            requests: 2.32.2
2024-06-12 23:43:04,437:INFO:          matplotlib: 3.7.5
2024-06-12 23:43:04,437:INFO:          scikitplot: 0.3.7
2024-06-12 23:43:04,437:INFO:         yellowbrick: 1.5
2024-06-12 23:43:04,437:INFO:              plotly: 5.22.0
2024-06-12 23:43:04,437:INFO:    plotly-resampler: Not installed
2024-06-12 23:43:04,437:INFO:             kaleido: 0.2.1
2024-06-12 23:43:04,437:INFO:           schemdraw: 0.15
2024-06-12 23:43:04,438:INFO:         statsmodels: 0.14.0
2024-06-12 23:43:04,438:INFO:              sktime: 0.26.0
2024-06-12 23:43:04,438:INFO:               tbats: 1.1.3
2024-06-12 23:43:04,438:INFO:            pmdarima: 2.0.4
2024-06-12 23:43:04,438:INFO:              psutil: 5.9.0
2024-06-12 23:43:04,438:INFO:          markupsafe: 2.1.3
2024-06-12 23:43:04,438:INFO:             pickle5: Not installed
2024-06-12 23:43:04,438:INFO:         cloudpickle: 2.2.1
2024-06-12 23:43:04,438:INFO:         deprecation: 2.1.0
2024-06-12 23:43:04,438:INFO:              xxhash: 3.4.1
2024-06-12 23:43:04,438:INFO:           wurlitzer: Not installed
2024-06-12 23:43:04,438:INFO:PyCaret optional dependencies:
2024-06-12 23:43:04,438:INFO:                shap: Not installed
2024-06-12 23:43:04,438:INFO:           interpret: Not installed
2024-06-12 23:43:04,438:INFO:                umap: Not installed
2024-06-12 23:43:04,438:INFO:     ydata_profiling: Not installed
2024-06-12 23:43:04,438:INFO:  explainerdashboard: Not installed
2024-06-12 23:43:04,438:INFO:             autoviz: Not installed
2024-06-12 23:43:04,438:INFO:           fairlearn: Not installed
2024-06-12 23:43:04,438:INFO:          deepchecks: Not installed
2024-06-12 23:43:04,438:INFO:             xgboost: Not installed
2024-06-12 23:43:04,438:INFO:            catboost: Not installed
2024-06-12 23:43:04,438:INFO:              kmodes: Not installed
2024-06-12 23:43:04,438:INFO:             mlxtend: Not installed
2024-06-12 23:43:04,438:INFO:       statsforecast: Not installed
2024-06-12 23:43:04,438:INFO:        tune_sklearn: Not installed
2024-06-12 23:43:04,438:INFO:                 ray: Not installed
2024-06-12 23:43:04,438:INFO:            hyperopt: Not installed
2024-06-12 23:43:04,438:INFO:              optuna: Not installed
2024-06-12 23:43:04,438:INFO:               skopt: Not installed
2024-06-12 23:43:04,438:INFO:              mlflow: Not installed
2024-06-12 23:43:04,438:INFO:              gradio: Not installed
2024-06-12 23:43:04,438:INFO:             fastapi: Not installed
2024-06-12 23:43:04,438:INFO:             uvicorn: Not installed
2024-06-12 23:43:04,438:INFO:              m2cgen: Not installed
2024-06-12 23:43:04,438:INFO:           evidently: Not installed
2024-06-12 23:43:04,438:INFO:               fugue: Not installed
2024-06-12 23:43:04,439:INFO:           streamlit: 1.32.0
2024-06-12 23:43:04,439:INFO:             prophet: Not installed
2024-06-12 23:43:04,439:INFO:None
2024-06-12 23:43:04,439:INFO:Set up data.
2024-06-12 23:43:04,445:INFO:Set up folding strategy.
2024-06-12 23:43:04,445:INFO:Set up train/test split.
2024-06-12 23:43:04,453:INFO:Set up index.
2024-06-12 23:43:04,455:INFO:Assigning column types.
2024-06-12 23:43:04,457:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-12 23:43:04,491:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-12 23:43:04,495:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-12 23:43:04,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,537:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,572:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-12 23:43:04,573:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-12 23:43:04,594:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,594:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,594:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-12 23:43:04,631:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-12 23:43:04,755:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,755:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,789:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-12 23:43:04,810:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,811:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,811:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-12 23:43:04,870:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,932:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:04,935:INFO:Preparing preprocessing pipeline...
2024-06-12 23:43:04,935:INFO:Set up label encoding.
2024-06-12 23:43:04,936:INFO:Set up simple imputation.
2024-06-12 23:43:04,937:INFO:Set up encoding of ordinal features.
2024-06-12 23:43:04,939:INFO:Set up encoding of categorical features.
2024-06-12 23:43:05,066:INFO:Finished creating preprocessing pipeline.
2024-06-12 23:43:05,089:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\geflo\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'MonthlyCharges',
                                             'TotalCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-06-12 23:43:05,090:INFO:Creating final display dataframe.
2024-06-12 23:43:05,375:INFO:Setup _display_container:                     Description             Value
0                    Session id              2845
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape         (7043, 7)
5        Transformed data shape        (7043, 12)
6   Transformed train set shape        (4930, 12)
7    Transformed test set shape        (2113, 12)
8              Numeric features                 3
9          Categorical features                 3
10     Rows with missing values              0.2%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              62ee
2024-06-12 23:43:05,443:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:05,443:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:05,506:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:05,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-12 23:43:05,507:INFO:setup() successfully completed in 1.08s...............
2024-06-12 23:43:56,431:INFO:Initializing compare_models()
2024-06-12 23:43:56,431:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-06-12 23:43:56,432:INFO:Checking exceptions
2024-06-12 23:43:56,437:INFO:Preparing display monitor
2024-06-12 23:43:56,457:INFO:Initializing Logistic Regression
2024-06-12 23:43:56,458:INFO:Total runtime is 0.0 minutes
2024-06-12 23:43:56,461:INFO:SubProcess create_model() called ==================================
2024-06-12 23:43:56,462:INFO:Initializing create_model()
2024-06-12 23:43:56,462:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:43:56,462:INFO:Checking exceptions
2024-06-12 23:43:56,462:INFO:Importing libraries
2024-06-12 23:43:56,462:INFO:Copying training dataset
2024-06-12 23:43:56,467:INFO:Defining folds
2024-06-12 23:43:56,467:INFO:Declaring metric variables
2024-06-12 23:43:56,470:INFO:Importing untrained model
2024-06-12 23:43:56,473:INFO:Logistic Regression Imported successfully
2024-06-12 23:43:56,480:INFO:Starting cross validation
2024-06-12 23:43:56,481:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:01,048:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,055:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,061:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,190:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,232:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,236:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,240:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,246:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,246:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,250:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,250:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,254:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,254:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,269:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,294:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,305:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,310:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,315:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,325:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,328:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,332:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,338:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,339:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,342:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,348:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:01,361:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,365:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,368:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,369:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,372:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,375:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,376:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,378:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,380:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,383:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,387:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,395:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,412:INFO:Calculating mean and std
2024-06-12 23:44:01,414:INFO:Creating metrics dataframe
2024-06-12 23:44:01,416:INFO:Uploading results into container
2024-06-12 23:44:01,417:INFO:Uploading model into container now
2024-06-12 23:44:01,418:INFO:_master_model_container: 1
2024-06-12 23:44:01,418:INFO:_display_container: 2
2024-06-12 23:44:01,418:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-12 23:44:01,418:INFO:create_model() successfully completed......................................
2024-06-12 23:44:01,551:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:01,551:INFO:Creating metrics dataframe
2024-06-12 23:44:01,559:INFO:Initializing K Neighbors Classifier
2024-06-12 23:44:01,559:INFO:Total runtime is 0.08504345019658406 minutes
2024-06-12 23:44:01,564:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:01,565:INFO:Initializing create_model()
2024-06-12 23:44:01,565:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:01,565:INFO:Checking exceptions
2024-06-12 23:44:01,565:INFO:Importing libraries
2024-06-12 23:44:01,565:INFO:Copying training dataset
2024-06-12 23:44:01,570:INFO:Defining folds
2024-06-12 23:44:01,570:INFO:Declaring metric variables
2024-06-12 23:44:01,574:INFO:Importing untrained model
2024-06-12 23:44:01,577:INFO:K Neighbors Classifier Imported successfully
2024-06-12 23:44:01,583:INFO:Starting cross validation
2024-06-12 23:44:01,584:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:01,845:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,846:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,851:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,851:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,856:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,858:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,861:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,863:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,865:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,868:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,870:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:01,874:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,750:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,750:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,757:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,761:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,763:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,763:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,764:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,766:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,768:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,770:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,771:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,781:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,788:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,796:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,812:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,818:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,823:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:04,832:INFO:Calculating mean and std
2024-06-12 23:44:04,834:INFO:Creating metrics dataframe
2024-06-12 23:44:04,836:INFO:Uploading results into container
2024-06-12 23:44:04,837:INFO:Uploading model into container now
2024-06-12 23:44:04,838:INFO:_master_model_container: 2
2024-06-12 23:44:04,838:INFO:_display_container: 2
2024-06-12 23:44:04,838:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-06-12 23:44:04,838:INFO:create_model() successfully completed......................................
2024-06-12 23:44:04,971:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:04,971:INFO:Creating metrics dataframe
2024-06-12 23:44:04,977:INFO:Initializing Naive Bayes
2024-06-12 23:44:04,977:INFO:Total runtime is 0.14199734131495156 minutes
2024-06-12 23:44:04,980:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:04,980:INFO:Initializing create_model()
2024-06-12 23:44:04,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:04,980:INFO:Checking exceptions
2024-06-12 23:44:04,980:INFO:Importing libraries
2024-06-12 23:44:04,980:INFO:Copying training dataset
2024-06-12 23:44:04,986:INFO:Defining folds
2024-06-12 23:44:04,986:INFO:Declaring metric variables
2024-06-12 23:44:04,990:INFO:Importing untrained model
2024-06-12 23:44:04,992:INFO:Naive Bayes Imported successfully
2024-06-12 23:44:04,998:INFO:Starting cross validation
2024-06-12 23:44:04,999:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:05,121:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,123:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,126:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,128:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,129:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,131:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,131:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,133:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,135:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,135:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,137:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,139:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,140:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,140:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,141:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,141:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,144:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,148:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,149:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,155:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,155:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,158:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,162:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,163:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,163:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,166:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,168:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,171:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,173:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,181:INFO:Calculating mean and std
2024-06-12 23:44:05,182:INFO:Creating metrics dataframe
2024-06-12 23:44:05,184:INFO:Uploading results into container
2024-06-12 23:44:05,185:INFO:Uploading model into container now
2024-06-12 23:44:05,186:INFO:_master_model_container: 3
2024-06-12 23:44:05,186:INFO:_display_container: 2
2024-06-12 23:44:05,186:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-06-12 23:44:05,186:INFO:create_model() successfully completed......................................
2024-06-12 23:44:05,288:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:05,289:INFO:Creating metrics dataframe
2024-06-12 23:44:05,300:INFO:Initializing Decision Tree Classifier
2024-06-12 23:44:05,301:INFO:Total runtime is 0.14739532073338826 minutes
2024-06-12 23:44:05,305:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:05,305:INFO:Initializing create_model()
2024-06-12 23:44:05,305:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:05,305:INFO:Checking exceptions
2024-06-12 23:44:05,305:INFO:Importing libraries
2024-06-12 23:44:05,306:INFO:Copying training dataset
2024-06-12 23:44:05,310:INFO:Defining folds
2024-06-12 23:44:05,310:INFO:Declaring metric variables
2024-06-12 23:44:05,313:INFO:Importing untrained model
2024-06-12 23:44:05,315:INFO:Decision Tree Classifier Imported successfully
2024-06-12 23:44:05,321:INFO:Starting cross validation
2024-06-12 23:44:05,322:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:05,471:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,474:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,477:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,480:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,482:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,487:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,490:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,490:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,493:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,494:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,495:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,497:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,497:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,499:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,500:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,501:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,501:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,503:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,505:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,506:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,507:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,507:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,509:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,512:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,513:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,514:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,514:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,519:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,521:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,524:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,540:INFO:Calculating mean and std
2024-06-12 23:44:05,543:INFO:Creating metrics dataframe
2024-06-12 23:44:05,546:INFO:Uploading results into container
2024-06-12 23:44:05,548:INFO:Uploading model into container now
2024-06-12 23:44:05,549:INFO:_master_model_container: 4
2024-06-12 23:44:05,549:INFO:_display_container: 2
2024-06-12 23:44:05,550:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=2845, splitter='best')
2024-06-12 23:44:05,550:INFO:create_model() successfully completed......................................
2024-06-12 23:44:05,664:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:05,664:INFO:Creating metrics dataframe
2024-06-12 23:44:05,678:INFO:Initializing SVM - Linear Kernel
2024-06-12 23:44:05,679:INFO:Total runtime is 0.15369687477747598 minutes
2024-06-12 23:44:05,681:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:05,682:INFO:Initializing create_model()
2024-06-12 23:44:05,682:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:05,682:INFO:Checking exceptions
2024-06-12 23:44:05,682:INFO:Importing libraries
2024-06-12 23:44:05,682:INFO:Copying training dataset
2024-06-12 23:44:05,687:INFO:Defining folds
2024-06-12 23:44:05,687:INFO:Declaring metric variables
2024-06-12 23:44:05,690:INFO:Importing untrained model
2024-06-12 23:44:05,694:INFO:SVM - Linear Kernel Imported successfully
2024-06-12 23:44:05,701:INFO:Starting cross validation
2024-06-12 23:44:05,703:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:05,852:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,854:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,857:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,857:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,858:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,858:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,860:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,861:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,863:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,863:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,864:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,865:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,865:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,866:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,869:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,869:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,870:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,870:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,872:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,873:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,876:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,876:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,877:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,878:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,879:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,883:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,883:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,885:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,891:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:05,908:INFO:Calculating mean and std
2024-06-12 23:44:05,908:INFO:Creating metrics dataframe
2024-06-12 23:44:05,911:INFO:Uploading results into container
2024-06-12 23:44:05,911:INFO:Uploading model into container now
2024-06-12 23:44:05,912:INFO:_master_model_container: 5
2024-06-12 23:44:05,912:INFO:_display_container: 2
2024-06-12 23:44:05,912:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=2845, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-06-12 23:44:05,912:INFO:create_model() successfully completed......................................
2024-06-12 23:44:06,018:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:06,018:INFO:Creating metrics dataframe
2024-06-12 23:44:06,024:INFO:Initializing Ridge Classifier
2024-06-12 23:44:06,024:INFO:Total runtime is 0.1594543655713399 minutes
2024-06-12 23:44:06,029:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:06,029:INFO:Initializing create_model()
2024-06-12 23:44:06,029:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:06,030:INFO:Checking exceptions
2024-06-12 23:44:06,030:INFO:Importing libraries
2024-06-12 23:44:06,030:INFO:Copying training dataset
2024-06-12 23:44:06,036:INFO:Defining folds
2024-06-12 23:44:06,036:INFO:Declaring metric variables
2024-06-12 23:44:06,040:INFO:Importing untrained model
2024-06-12 23:44:06,045:INFO:Ridge Classifier Imported successfully
2024-06-12 23:44:06,051:INFO:Starting cross validation
2024-06-12 23:44:06,052:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:06,172:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,176:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,181:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,184:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,186:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,189:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,191:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,193:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,195:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,197:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,197:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,199:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,199:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,201:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,201:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,204:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,205:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,206:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,206:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,206:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,208:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,208:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,209:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,211:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,212:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,213:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,215:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,219:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,222:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,232:INFO:Calculating mean and std
2024-06-12 23:44:06,234:INFO:Creating metrics dataframe
2024-06-12 23:44:06,236:INFO:Uploading results into container
2024-06-12 23:44:06,236:INFO:Uploading model into container now
2024-06-12 23:44:06,237:INFO:_master_model_container: 6
2024-06-12 23:44:06,237:INFO:_display_container: 2
2024-06-12 23:44:06,237:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2845, solver='auto',
                tol=0.0001)
2024-06-12 23:44:06,237:INFO:create_model() successfully completed......................................
2024-06-12 23:44:06,336:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:06,336:INFO:Creating metrics dataframe
2024-06-12 23:44:06,343:INFO:Initializing Random Forest Classifier
2024-06-12 23:44:06,343:INFO:Total runtime is 0.16477937300999956 minutes
2024-06-12 23:44:06,346:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:06,346:INFO:Initializing create_model()
2024-06-12 23:44:06,346:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:06,346:INFO:Checking exceptions
2024-06-12 23:44:06,346:INFO:Importing libraries
2024-06-12 23:44:06,346:INFO:Copying training dataset
2024-06-12 23:44:06,351:INFO:Defining folds
2024-06-12 23:44:06,351:INFO:Declaring metric variables
2024-06-12 23:44:06,354:INFO:Importing untrained model
2024-06-12 23:44:06,357:INFO:Random Forest Classifier Imported successfully
2024-06-12 23:44:06,363:INFO:Starting cross validation
2024-06-12 23:44:06,365:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:06,959:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,966:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,971:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,972:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,975:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,979:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,979:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,986:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:06,999:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,038:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,039:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,041:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,046:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,046:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,048:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,052:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,053:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,053:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,064:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,069:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,073:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,140:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,141:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,141:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,143:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,147:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,147:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,147:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,156:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,156:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,179:INFO:Calculating mean and std
2024-06-12 23:44:07,180:INFO:Creating metrics dataframe
2024-06-12 23:44:07,183:INFO:Uploading results into container
2024-06-12 23:44:07,183:INFO:Uploading model into container now
2024-06-12 23:44:07,184:INFO:_master_model_container: 7
2024-06-12 23:44:07,184:INFO:_display_container: 2
2024-06-12 23:44:07,185:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2845, verbose=0,
                       warm_start=False)
2024-06-12 23:44:07,185:INFO:create_model() successfully completed......................................
2024-06-12 23:44:07,295:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:07,295:INFO:Creating metrics dataframe
2024-06-12 23:44:07,308:INFO:Initializing Quadratic Discriminant Analysis
2024-06-12 23:44:07,309:INFO:Total runtime is 0.1808769901593526 minutes
2024-06-12 23:44:07,311:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:07,311:INFO:Initializing create_model()
2024-06-12 23:44:07,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:07,312:INFO:Checking exceptions
2024-06-12 23:44:07,312:INFO:Importing libraries
2024-06-12 23:44:07,312:INFO:Copying training dataset
2024-06-12 23:44:07,316:INFO:Defining folds
2024-06-12 23:44:07,316:INFO:Declaring metric variables
2024-06-12 23:44:07,321:INFO:Importing untrained model
2024-06-12 23:44:07,324:INFO:Quadratic Discriminant Analysis Imported successfully
2024-06-12 23:44:07,329:INFO:Starting cross validation
2024-06-12 23:44:07,331:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:07,457:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,457:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,457:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,462:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,463:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,475:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,476:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-12 23:44:07,501:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,501:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,501:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,504:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,504:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,505:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,506:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,506:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,506:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,508:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,508:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,509:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,511:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,512:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,512:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,513:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,513:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,513:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,514:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,515:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,515:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,518:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,518:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,518:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,519:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,521:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,524:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,524:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,528:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:07,547:INFO:Calculating mean and std
2024-06-12 23:44:07,548:INFO:Creating metrics dataframe
2024-06-12 23:44:07,552:INFO:Uploading results into container
2024-06-12 23:44:07,553:INFO:Uploading model into container now
2024-06-12 23:44:07,553:INFO:_master_model_container: 8
2024-06-12 23:44:07,553:INFO:_display_container: 2
2024-06-12 23:44:07,554:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-06-12 23:44:07,554:INFO:create_model() successfully completed......................................
2024-06-12 23:44:07,664:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:07,664:INFO:Creating metrics dataframe
2024-06-12 23:44:07,671:INFO:Initializing Ada Boost Classifier
2024-06-12 23:44:07,671:INFO:Total runtime is 0.1869111657142639 minutes
2024-06-12 23:44:07,675:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:07,675:INFO:Initializing create_model()
2024-06-12 23:44:07,676:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:07,676:INFO:Checking exceptions
2024-06-12 23:44:07,676:INFO:Importing libraries
2024-06-12 23:44:07,676:INFO:Copying training dataset
2024-06-12 23:44:07,682:INFO:Defining folds
2024-06-12 23:44:07,682:INFO:Declaring metric variables
2024-06-12 23:44:07,686:INFO:Importing untrained model
2024-06-12 23:44:07,690:INFO:Ada Boost Classifier Imported successfully
2024-06-12 23:44:07,697:INFO:Starting cross validation
2024-06-12 23:44:07,698:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:07,784:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,791:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,800:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,802:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,804:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,806:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,810:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,815:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,820:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:07,833:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-12 23:44:08,058:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,061:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,061:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,063:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,065:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,065:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,066:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,067:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,071:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,071:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,072:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,076:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,078:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,083:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,084:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,085:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,090:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,091:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,092:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,093:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,095:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,097:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,098:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,099:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,100:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,101:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,104:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,124:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,128:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,132:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:08,153:INFO:Calculating mean and std
2024-06-12 23:44:08,154:INFO:Creating metrics dataframe
2024-06-12 23:44:08,156:INFO:Uploading results into container
2024-06-12 23:44:08,156:INFO:Uploading model into container now
2024-06-12 23:44:08,158:INFO:_master_model_container: 9
2024-06-12 23:44:08,158:INFO:_display_container: 2
2024-06-12 23:44:08,158:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2845)
2024-06-12 23:44:08,158:INFO:create_model() successfully completed......................................
2024-06-12 23:44:08,266:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:08,266:INFO:Creating metrics dataframe
2024-06-12 23:44:08,280:INFO:Initializing Gradient Boosting Classifier
2024-06-12 23:44:08,280:INFO:Total runtime is 0.1970596114794413 minutes
2024-06-12 23:44:08,283:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:08,284:INFO:Initializing create_model()
2024-06-12 23:44:08,284:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:08,284:INFO:Checking exceptions
2024-06-12 23:44:08,285:INFO:Importing libraries
2024-06-12 23:44:08,285:INFO:Copying training dataset
2024-06-12 23:44:08,298:INFO:Defining folds
2024-06-12 23:44:08,298:INFO:Declaring metric variables
2024-06-12 23:44:08,306:INFO:Importing untrained model
2024-06-12 23:44:08,314:INFO:Gradient Boosting Classifier Imported successfully
2024-06-12 23:44:08,320:INFO:Starting cross validation
2024-06-12 23:44:08,321:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:09,003:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,008:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,010:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,015:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,017:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,017:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,020:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,022:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,023:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,030:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,030:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,031:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,037:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,037:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,042:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,046:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,050:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,050:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,051:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,052:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,052:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,054:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,055:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,056:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,058:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,058:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,059:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,059:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,061:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,064:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,080:INFO:Calculating mean and std
2024-06-12 23:44:09,082:INFO:Creating metrics dataframe
2024-06-12 23:44:09,084:INFO:Uploading results into container
2024-06-12 23:44:09,085:INFO:Uploading model into container now
2024-06-12 23:44:09,085:INFO:_master_model_container: 10
2024-06-12 23:44:09,085:INFO:_display_container: 2
2024-06-12 23:44:09,085:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=2845, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-12 23:44:09,085:INFO:create_model() successfully completed......................................
2024-06-12 23:44:09,198:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:09,198:INFO:Creating metrics dataframe
2024-06-12 23:44:09,208:INFO:Initializing Linear Discriminant Analysis
2024-06-12 23:44:09,208:INFO:Total runtime is 0.21251809994379675 minutes
2024-06-12 23:44:09,211:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:09,211:INFO:Initializing create_model()
2024-06-12 23:44:09,211:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:09,211:INFO:Checking exceptions
2024-06-12 23:44:09,211:INFO:Importing libraries
2024-06-12 23:44:09,212:INFO:Copying training dataset
2024-06-12 23:44:09,217:INFO:Defining folds
2024-06-12 23:44:09,217:INFO:Declaring metric variables
2024-06-12 23:44:09,220:INFO:Importing untrained model
2024-06-12 23:44:09,223:INFO:Linear Discriminant Analysis Imported successfully
2024-06-12 23:44:09,229:INFO:Starting cross validation
2024-06-12 23:44:09,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:09,345:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,352:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,359:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,364:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,365:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,369:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,369:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,370:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,372:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,373:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,373:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,375:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,376:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,378:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,379:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,380:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,381:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,383:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,383:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,385:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,386:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,386:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,388:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,389:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,390:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,391:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,395:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,396:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,399:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,400:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:09,421:INFO:Calculating mean and std
2024-06-12 23:44:09,422:INFO:Creating metrics dataframe
2024-06-12 23:44:09,424:INFO:Uploading results into container
2024-06-12 23:44:09,425:INFO:Uploading model into container now
2024-06-12 23:44:09,425:INFO:_master_model_container: 11
2024-06-12 23:44:09,425:INFO:_display_container: 2
2024-06-12 23:44:09,425:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-12 23:44:09,426:INFO:create_model() successfully completed......................................
2024-06-12 23:44:09,522:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:09,522:INFO:Creating metrics dataframe
2024-06-12 23:44:09,531:INFO:Initializing Extra Trees Classifier
2024-06-12 23:44:09,531:INFO:Total runtime is 0.21790231068929033 minutes
2024-06-12 23:44:09,535:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:09,535:INFO:Initializing create_model()
2024-06-12 23:44:09,536:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:09,536:INFO:Checking exceptions
2024-06-12 23:44:09,536:INFO:Importing libraries
2024-06-12 23:44:09,536:INFO:Copying training dataset
2024-06-12 23:44:09,544:INFO:Defining folds
2024-06-12 23:44:09,544:INFO:Declaring metric variables
2024-06-12 23:44:09,548:INFO:Importing untrained model
2024-06-12 23:44:09,551:INFO:Extra Trees Classifier Imported successfully
2024-06-12 23:44:09,557:INFO:Starting cross validation
2024-06-12 23:44:09,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:10,097:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,097:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,098:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,104:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,105:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,108:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,112:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,113:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,131:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,144:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,145:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,151:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,153:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,158:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,158:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,174:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,179:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,184:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,187:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,188:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,193:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,194:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,199:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,200:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,218:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,222:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,225:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,266:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,269:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,273:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:10,291:INFO:Calculating mean and std
2024-06-12 23:44:10,293:INFO:Creating metrics dataframe
2024-06-12 23:44:10,296:INFO:Uploading results into container
2024-06-12 23:44:10,296:INFO:Uploading model into container now
2024-06-12 23:44:10,296:INFO:_master_model_container: 12
2024-06-12 23:44:10,296:INFO:_display_container: 2
2024-06-12 23:44:10,298:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=2845, verbose=0,
                     warm_start=False)
2024-06-12 23:44:10,298:INFO:create_model() successfully completed......................................
2024-06-12 23:44:10,393:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:10,393:INFO:Creating metrics dataframe
2024-06-12 23:44:10,408:INFO:Initializing Light Gradient Boosting Machine
2024-06-12 23:44:10,408:INFO:Total runtime is 0.23252293268839516 minutes
2024-06-12 23:44:10,411:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:10,411:INFO:Initializing create_model()
2024-06-12 23:44:10,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:10,411:INFO:Checking exceptions
2024-06-12 23:44:10,412:INFO:Importing libraries
2024-06-12 23:44:10,412:INFO:Copying training dataset
2024-06-12 23:44:10,416:INFO:Defining folds
2024-06-12 23:44:10,416:INFO:Declaring metric variables
2024-06-12 23:44:10,420:INFO:Importing untrained model
2024-06-12 23:44:10,428:INFO:Light Gradient Boosting Machine Imported successfully
2024-06-12 23:44:10,436:INFO:Starting cross validation
2024-06-12 23:44:10,440:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:11,215:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,221:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,228:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,273:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,281:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,288:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,301:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,307:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,314:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,323:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,329:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,335:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,368:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,375:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,383:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,384:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,392:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,399:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,399:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,405:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,408:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,412:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,415:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,422:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,440:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,446:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,454:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,471:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,475:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,481:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,494:INFO:Calculating mean and std
2024-06-12 23:44:11,496:INFO:Creating metrics dataframe
2024-06-12 23:44:11,499:INFO:Uploading results into container
2024-06-12 23:44:11,500:INFO:Uploading model into container now
2024-06-12 23:44:11,500:INFO:_master_model_container: 13
2024-06-12 23:44:11,500:INFO:_display_container: 2
2024-06-12 23:44:11,501:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=2845, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-06-12 23:44:11,501:INFO:create_model() successfully completed......................................
2024-06-12 23:44:11,612:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:11,612:INFO:Creating metrics dataframe
2024-06-12 23:44:11,621:INFO:Initializing Dummy Classifier
2024-06-12 23:44:11,621:INFO:Total runtime is 0.25273824930191036 minutes
2024-06-12 23:44:11,626:INFO:SubProcess create_model() called ==================================
2024-06-12 23:44:11,626:INFO:Initializing create_model()
2024-06-12 23:44:11,626:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001494489AC20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:11,628:INFO:Checking exceptions
2024-06-12 23:44:11,628:INFO:Importing libraries
2024-06-12 23:44:11,628:INFO:Copying training dataset
2024-06-12 23:44:11,636:INFO:Defining folds
2024-06-12 23:44:11,636:INFO:Declaring metric variables
2024-06-12 23:44:11,640:INFO:Importing untrained model
2024-06-12 23:44:11,643:INFO:Dummy Classifier Imported successfully
2024-06-12 23:44:11,648:INFO:Starting cross validation
2024-06-12 23:44:11,649:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-12 23:44:11,796:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,798:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,801:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,801:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,804:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,805:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,806:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,808:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,808:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,809:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,809:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,811:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,811:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,813:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,813:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,813:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,814:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,815:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,816:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,819:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,819:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,819:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,821:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,821:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,821:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,824:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,824:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,825:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,826:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,826:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,829:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,829:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,829:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,829:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,831:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,831:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:44:11,832:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,833:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,835:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:44:11,853:INFO:Calculating mean and std
2024-06-12 23:44:11,854:INFO:Creating metrics dataframe
2024-06-12 23:44:11,856:INFO:Uploading results into container
2024-06-12 23:44:11,856:INFO:Uploading model into container now
2024-06-12 23:44:11,856:INFO:_master_model_container: 14
2024-06-12 23:44:11,856:INFO:_display_container: 2
2024-06-12 23:44:11,858:INFO:DummyClassifier(constant=None, random_state=2845, strategy='prior')
2024-06-12 23:44:11,858:INFO:create_model() successfully completed......................................
2024-06-12 23:44:11,972:INFO:SubProcess create_model() end ==================================
2024-06-12 23:44:11,972:INFO:Creating metrics dataframe
2024-06-12 23:44:11,983:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-06-12 23:44:11,992:INFO:Initializing create_model()
2024-06-12 23:44:11,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-12 23:44:11,993:INFO:Checking exceptions
2024-06-12 23:44:11,996:INFO:Importing libraries
2024-06-12 23:44:11,996:INFO:Copying training dataset
2024-06-12 23:44:12,001:INFO:Defining folds
2024-06-12 23:44:12,002:INFO:Declaring metric variables
2024-06-12 23:44:12,002:INFO:Importing untrained model
2024-06-12 23:44:12,002:INFO:Declaring custom model
2024-06-12 23:44:12,002:INFO:Logistic Regression Imported successfully
2024-06-12 23:44:12,004:INFO:Cross validation set to False
2024-06-12 23:44:12,004:INFO:Fitting Model
2024-06-12 23:44:12,347:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-12 23:44:12,347:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-12 23:44:12,348:INFO:create_model() successfully completed......................................
2024-06-12 23:44:12,476:INFO:_master_model_container: 14
2024-06-12 23:44:12,476:INFO:_display_container: 2
2024-06-12 23:44:12,477:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-12 23:44:12,477:INFO:compare_models() successfully completed......................................
2024-06-12 23:44:58,304:INFO:Initializing evaluate_model()
2024-06-12 23:44:58,304:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-06-12 23:44:58,317:INFO:Initializing plot_model()
2024-06-12 23:44:58,317:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, system=True)
2024-06-12 23:44:58,317:INFO:Checking exceptions
2024-06-12 23:44:58,319:INFO:Preloading libraries
2024-06-12 23:44:58,319:INFO:Copying training dataset
2024-06-12 23:44:58,319:INFO:Plot type: pipeline
2024-06-12 23:44:58,490:INFO:Visual Rendered Successfully
2024-06-12 23:44:58,597:INFO:plot_model() successfully completed......................................
2024-06-12 23:45:10,248:INFO:Initializing plot_model()
2024-06-12 23:45:10,248:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, system=True)
2024-06-12 23:45:10,248:INFO:Checking exceptions
2024-06-12 23:45:10,253:INFO:Preloading libraries
2024-06-12 23:45:10,253:INFO:Copying training dataset
2024-06-12 23:45:10,253:INFO:Plot type: auc
2024-06-12 23:45:10,534:INFO:Fitting Model
2024-06-12 23:45:10,537:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-06-12 23:45:10,538:INFO:Scoring test/hold-out set
2024-06-12 23:45:10,715:INFO:Visual Rendered Successfully
2024-06-12 23:45:10,814:INFO:plot_model() successfully completed......................................
2024-06-12 23:45:23,960:INFO:Initializing plot_model()
2024-06-12 23:45:23,960:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, system=True)
2024-06-12 23:45:23,960:INFO:Checking exceptions
2024-06-12 23:45:23,965:INFO:Preloading libraries
2024-06-12 23:45:23,965:INFO:Copying training dataset
2024-06-12 23:45:23,965:INFO:Plot type: confusion_matrix
2024-06-12 23:45:24,265:INFO:Fitting Model
2024-06-12 23:45:24,266:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-06-12 23:45:24,266:INFO:Scoring test/hold-out set
2024-06-12 23:45:24,364:INFO:Visual Rendered Successfully
2024-06-12 23:45:24,466:INFO:plot_model() successfully completed......................................
2024-06-12 23:46:05,376:INFO:Initializing predict_model()
2024-06-12 23:46:05,376:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000149448B7BE0>)
2024-06-12 23:46:05,376:INFO:Checking exceptions
2024-06-12 23:46:05,376:INFO:Preloading libraries
2024-06-12 23:46:05,380:INFO:Set up data.
2024-06-12 23:46:05,385:INFO:Set up index.
2024-06-12 23:46:05,435:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2024-06-12 23:46:05,436:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:46:05,437:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:46:05,438:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:46:05,439:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:46:05,440:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:46:05,441:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-12 23:46:05,442:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2024-06-12 23:46:05,442:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2024-06-12 23:46:05,443:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2024-06-12 23:46:15,649:INFO:Initializing predict_model()
2024-06-12 23:46:15,649:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001494489AD10>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014947FAACB0>)
2024-06-12 23:46:15,649:INFO:Checking exceptions
2024-06-12 23:46:15,649:INFO:Preloading libraries
2024-06-12 23:46:15,653:INFO:Set up data.
2024-06-12 23:46:15,659:INFO:Set up index.
2024-06-12 23:46:15,781:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:46:15,824:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:46:15,869:WARNING:C:\Users\geflo\anaconda3\envs\PY310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-12 23:46:36,389:INFO:Initializing save_model()
2024-06-12 23:46:36,390:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2845, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=pycaret_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\geflo\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'MonthlyCharges',
                                             'TotalCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-06-12 23:46:36,390:INFO:Adding model into prep_pipe
2024-06-12 23:46:36,396:INFO:pycaret_model.pkl saved in current working directory
2024-06-12 23:46:36,409:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'MonthlyCharges',
                                             'TotalCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2845,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-06-12 23:46:36,409:INFO:save_model() successfully completed......................................
2024-06-12 23:46:53,551:INFO:Initializing load_model()
2024-06-12 23:46:53,551:INFO:load_model(model_name=pycaret_model, platform=None, authentication=None, verbose=True)
2024-06-12 23:47:02,734:INFO:Initializing predict_model()
2024-06-12 23:47:02,734:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000149442810F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'MonthlyCharges',
                                             'TotalCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2845,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014947EF8AF0>)
2024-06-12 23:47:02,735:INFO:Checking exceptions
2024-06-12 23:47:02,735:INFO:Preloading libraries
2024-06-12 23:47:02,735:INFO:Set up data.
2024-06-12 23:47:02,738:INFO:Set up index.
2024-06-12 23:49:36,073:INFO:Initializing load_model()
2024-06-12 23:49:36,074:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2024-06-12 23:50:59,672:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:50:59,672:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:50:59,672:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:50:59,672:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-12 23:51:10,207:INFO:Initializing load_model()
2024-06-12 23:51:10,207:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2024-06-12 23:56:13,971:INFO:Initializing load_model()
2024-06-12 23:56:13,972:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2024-06-12 23:57:20,746:INFO:Initializing load_model()
2024-06-12 23:57:20,746:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2024-06-12 23:58:39,993:INFO:Initializing load_model()
2024-06-12 23:58:39,994:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2024-06-13 00:01:55,747:INFO:Initializing load_model()
2024-06-13 00:01:55,748:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2024-06-13 00:01:55,769:INFO:Initializing predict_model()
2024-06-13 00:01:55,769:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000149483E3E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'MonthlyCharges',
                                             'TotalCharges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2845,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001494BC42CB0>)
2024-06-13 00:01:55,769:INFO:Checking exceptions
2024-06-13 00:01:55,769:INFO:Preloading libraries
2024-06-13 00:01:55,771:INFO:Set up data.
2024-06-13 00:01:55,773:INFO:Set up index.
